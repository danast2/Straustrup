#include <iostream>

/*void* operator new(size_t size){
    for (;;) {
        if(void* p = malloc(size)) return p; //попытка найти память
        if(_new_handler == 0) throw bad_alloc(); //нет обработчика: сдаемся
        _new_handler(); //запрос помощи
    }
}*/

/*Здесь используется malloc() из стандартной библиотеки языка С для
выполнения поиска свободной памяти; другие реализации функции operator new()
могут избрать иные способы для выполнения такой работы. Если память выделена,
operator new () может возвратить указатель на нее. В противном случае вызывается
функция-обработчик _new_handler (), призванная помочь отыскать
дополнительный объем свободной памяти. Если она в этом преуспевает, то все прекрасно. Если
нет — то обработчик не может просто вернуть управление, так как это приведет
к бесконечному циклу. Он должен сгенерировать исключение, предоставив
вызывающей программе разбираться с проблемой:*/

/*void my_new_handler(){
    int no_of_bytes_found = find_some_memory();
    if (no_of_bytes_found < min_allocation) throw bad_alloc(); //сдаемся
}*/

/*try{

}
catch (bad alloc){

}
catch (...){

}
    set_new_handler(oldnh) ; //вернуть обработчик
    throw; //повторно сгенерировать исключение
Set_new_handler {oldnh) ; //вернуть обработчик
}*/